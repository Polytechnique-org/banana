<?php
/********************************************************************************
* banana/banana.inc.php : banana main file
* --------------------------
*
* This file is part of the banana distribution
* Copyright: See COPYING files that comes with this distribution
********************************************************************************/

class Banana
{
    static public $maxspool    = 3000;

    static public $parse_hdr   = array('content-disposition', 'content-transfer-encoding',
                                       'content-type', 'content-id', 'date', 'followup-to',
                                       'from', 'message-id', 'newsgroups', 'organization',
                                       'references', 'subject', 'x-face', 'in-reply-to',
                                       'to', 'cc', 'reply-to');
    static public $show_hdr    = array('from', 'newsgroups', 'followup-to', 'to', 'cc', 'reply-to',
                                       'organization', 'date', 'references', 'in-reply-to');

    /** Favorites MIMEtypes to use, by order for reading multipart messages
     */
    static public $body_mime   = array('text/html', 'text/plain', 'text/enriched', 'text', 'message');

    /** Indicate wether posting attachment is allowed
     */
    static public $can_attach  = true;
    /** Maximum allowed file size for attachment
     */
    static public $maxfilesize = 100000;
    /** Indicate wether x-face should be skinned as specials data or not
     */
    static public $formatxface = true;

    /** Regexp for selecting newsgroups to show (if empty, match all newsgroups)
     * ex : '^xorg\..*' for xorg.*
     */
    static public $grp_pattern = null;

    static public $tbefore     = 5;
    static public $tafter      = 5;
    static public $tmax        = 50;

    static public $wrap        = 78;
    
    /** Match an url
     * Should be included in a regexp delimited using /, !, , or @ (eg: "/$url_regexp/i")
     * If it matches, return 3 main parts :
     *  \\1 and \\3 are delimiters
     *  \\2 is the url
     *
     * eg : preg_match("!$url_regexp!i", "[http://www.polytechnique.org]", $matches);
     *   $matches[1] = "["
     *   $matches[2] = "http://www.polytechnique.org"
     *   $matches[3] = "]"
     */
    static public $url_regexp  = '(["\[])?((?:[a-z]+:\/\/|www\.)(?:[\.\,\;\!]*[a-z\@0-9~%$£µ&i#\-+=_\/\?]+)+)(["\]])?';

    /** Global headers to use for messages
     */
    static public $custom_hdr  = array('Mime-Version' => '1.0', 'User-Agent' => 'Banana @VERSION@');

    /** News serveur to use
     */
    static public $host        = 'news://localhost:119/';

    /** User profile
     */
    static public $profile     = Array( 'From' => 'Anonymous <anonymouse@example.com>', 'sig'  => '',
                                        'Organization'  => '', 'custom_hdr' => array(), 'display' => 0,
                                        'lastnews' => 0, 'locale'  => 'fr_FR', 'subscribe' => array());

    static public $protocole   = null;
    static public $spool       = null;
    static public $message     = null;
    static public $page        = null;

    static public $group       = null;
    static public $artid       = null;
    static public $action      = null;
    static public $part        = null;
    static public $first       = null;

    static public $debug_nntp   = false;
    static public $debug_smarty = false;


    // Actions
    const ACTION_BOX_NEEDED = 1; // mask
    const ACTION_BOX_LIST   = 2;
    const ACTION_BOX_SUBS   = 4;
    const ACTION_MSG_LIST   = 3;
    const ACTION_MSG_READ   = 5;
    const ACTION_MSG_NEW    = 9;
    const ACTION_MSG_CANCEL = 17;

    // Box list view
    const BOXES_ALL = 0;
    const BOXES_SUB = 1;
    const BOXES_NEW = 2;

    // Spool view mode
    const SPOOL_ALL    = 0;
    const SPOOL_UNREAD = 1;

    /** Class parameters storage
     */
    public $params;

    /** Build the instance of Banana
     * This constructor only call \ref loadParams, connect to the server, and build the Smarty page
     * @param protocole Protocole to use
     */
    public function __construct($params = null, $protocole = 'NNTP', $pageclass = 'BananaPage')
    {
        Banana::load('text.func');
        if (is_null($params)) {
            $this->params = $_GET;
        } else {
            $this->params = $params;
        }
        $this->loadParams();

        // connect to protocole handler
        Banana::load($protocole);
        $classname = 'Banana' . $protocole;
        Banana::$protocole = new $classname(Banana::$group);

        // build the page
        if ($pageclass == 'BananaPage') {
            Banana::load('page');
        }
        Banana::$page = new $pageclass;
    }

    /** Fill state vars (Banana::$group, Banana::$artid, Banana::$action, Banana;:$part, Banana::$first)
     */
    protected function loadParams()
    {
        Banana::$group = isset($this->params['group']) ? $this->params['group'] : null;
        Banana::$artid = isset($this->params['artid']) ? $this->params['artid'] : null;
        Banana::$first = isset($this->params['first']) ? $this->params['first'] : null;
        Banana::$part  = isset($this->params['part']) ? $this->params['part'] : 'text';

        // Look for the action to execute
        if (is_null(Banana::$group)) {
            if (isset($this->params['subscribe'])) {
                Banana::$action = Banana::ACTION_BOX_SUBS;
            } else {
                Banana::$action = Banana::ACTION_BOX_LIST;
            }
            return;
        }
        $action = isset($this->params['action']) ? $this->params['action'] : null; 
        if (is_null(Banana::$artid)) {
            if ($action == 'new') {
                Banana::$action = Banana::ACTION_MSG_NEW;
            } else {
                Banana::$action = Banana::ACTION_MSG_LIST;
            }
            return;
        }
        switch ($action) {
          case 'new':
            Banana::$action = Banana::ACTION_MSG_NEW;
            return;
          case 'cancel':
            Banana::$action = Banana::ACTION_MSG_CANCEL;
            return;
          default:
            Banana::$action = Banana::ACTION_MSG_READ;
        }
    }

    /** Register an action to show on banana page
     * @param action_code HTML code of the action
     * @param pages ARRAY pages where to show the action (null == every pages)
     * @return true if success
     */
    public function registerAction($action_code, array $pages = null)
    {
        return Banana::$page->registerAction($action_code, $pages);
    }

    /** Register a new page
     * @param name Name of the page
     * @param text Text for the tab of the page
     * @param template Template path for the page if null, the page is not handled by banana
     * @return true if success
     */
    public function registerPage($name, $text, $template = null)
    {
        return Banana::$page->registerPage($name, $text, $template);
    }

    /** Run Banana
     * This function need user profile to be initialised
     */
    public function run()
    {
        // Configure locales
        setlocale(LC_ALL,  Banana::$profile['locale']);
        
        // Check if the state is valid
        if (Banana::$protocole->lastErrNo()) {
            return Banana::$page->kill(_b_('Une erreur a été rencontrée lors de la connexion au serveur') . '<br />'
                                      . Banana::$protocole->lastError());
        }
        if (!Banana::$protocole->isValid()) {
            return Banana::$page->kill(_b_('Connexion non-valide'));
        }
        if (Banana::$action & Banana::ACTION_BOX_NEEDED) {
            if(isset(Banana::$grp_pattern) && !preg_match('/' . Banana::$grp_pattern . '/', $group)) {
                Banana::$page->setPage('group');        
                return Banana::$page->kill(_b_("Ce newsgroup n'existe pas ou vous n'avez pas l'autorisation d'y accéder"));
            }
        }

        // Dispatch to the action handlers
        switch (Banana::$action) {
          case Banana::ACTION_BOX_SUBS:
            $error = $this->action_subscribe();
            break;
          case Banana::ACTION_BOX_LIST:
            $error = $this->action_listBoxes();
            break;
          case Banana::ACTION_MSG_LIST:
            $error = $this->action_showThread(Banana::$group, Banana::$first);
            break;
          case Banana::ACTION_MSG_READ:
            $error = $this->action_showMessage(Banana::$group, Banana::$artid, Banana::$part);
            break;
          case Banana::ACTION_MSG_NEW:
            $error = $this->action_newMessage(Banana::$group, Banana::$artid);
            break;
          case Banana::ACTION_MSG_CANCEL:
            $error = $this->action_cancelMessage(Banana::$group, Banana::$artid);
            break;
          default:
            $error = _b_("L'action demandée n'est pas supportée par Banana");
        }

        // Generate the page
        if (is_string($error)) {
            return Banana::$page->kill($error);
        }
        return Banana::$page->run();
    }

    /**************************************************************************/
    /* actions                                                                */
    /**************************************************************************/
    protected function action_saveSubs($groups)
    {
        Banana::$profile['subscribe'] = $groups;
        return true;
    }

    protected function action_subscribe()
    {
        Banana::$page->setPage('subscribe');
        if (isset($_POST['validsubs'])) {
            $this->action_saveSubs(array_keys($_POST['subscribe']));
            Banana::$page->redirect();
        }
        $groups = Banana::$protocole->getBoxList(Banana::BOXES_ALL);
        Banana::$page->assign('groups', $groups);
        return true;
    }

    protected function action_listBoxes()
    {
        Banana::$page->setPage('forums');
        $groups    = Banana::$protocole->getBoxList(Banana::BOXES_SUB, Banana::$profile['lastnews'], true);
        $newgroups = Banana::$protocole->getBoxList(Banana::BOXES_NEW, Banana::$profile['lastnews'], true);
        Banana::$page->assign('groups', $groups);
        Banana::$page->assign('newgroups', $newgroups);
        return true;
    }

    protected function action_showThread($group, $first)
    {
        Banana::$page->setPage('thread');
        if (!$this->loadSpool($group)) {
            return _b_('Impossible charger la liste des messages de ') . $group;
        }
        $groups = Banana::$protocole->getBoxList(Banana::BOXES_SUB, Banana::$profile['lastnews'], true);
        Banana::$page->assign('msgbypage', Banana::$tmax);
        Banana::$page->assign('groups', $groups);
        return true;
    }

    protected function action_showMessage($group, $artid, $partid = 'text')
    {
        Banana::$page->setPage('message');
        if ($partid == 'text') {
            $this->loadSpool($group);
        }
        $msg =& $this->loadMessage($group, $artid);
        if (is_null($msg)) {
            $this->loadSpool($group);
            $this->removeMessage($group, $artid);
            return _b_('Le message demandé n\'existe pas. Il est possible qu\'il ait été annulé');
        }
        if ($partid == 'xface') {
            $msg->getXFace();
            exit;
        } elseif ($partid != 'text') {
            $part = $msg->getPartById($partid);
            if (!is_null($part)) {
                $part->send(true);
            }
            $part = $msg->getFile($partid);
            if (!is_null($part)) {
                $part->send();
            }
            exit;
        }
        $groups    = Banana::$protocole->getBoxList(Banana::BOXES_SUB, Banana::$profile['lastnews'], true);
        Banana::$page->assign('groups', $groups);
        Banana::$page->assign_by_ref('message', $msg);
        Banana::$page->assign('headers', Banana::$show_hdr);
        return true;
    }

    protected function action_newMessage($group, $artid)
    {
        Banana::$page->setPage('new');
        if (!Banana::$protocole->canSend()) {
            return _b_('Vous n\'avez pas le droit de poster');
        }
        $hdrs    = Banana::$protocole->requestedHeaders();
        $headers = array();
        foreach ($hdrs as $header) {
            $headers[$header] = array('name' => BananaMessage::translateHeaderName($header));
            if (isset(Banana::$profile[$header])) {
                $headers[$header]['fixed'] = Banana::$profile[$header];
            }
        }
        if (isset($_POST['sendmessage'])) {
            $hdr_values = array();
            foreach ($hdrs as $header) {
                $hdr_values[$header] = isset($headers[$header]['fixed']) ? $headers[$header]['fixed'] : @$_POST[$header];
            }
            if ($artid) {
                $old =& $this->loadMessage($group, $artid);
                $hdr_values['References'] = $old->getHeaderValue('references') . $old->getHeaderValue('message-id');
            }
            $msg = null;
            if (empty($hdr_values['Subject'])) {
                Banana::$page->trig(_b_('Le message doit avoir un sujet'));
            } elseif (Banana::$can_attach && isset($_FILES['attachment'])) {
                $uploaded = $_FILES['attachment'];
                if (!is_uploaded_file($uploaded['tmp_name'])) {
                    Banana::$page->trig(_b_('Une erreur est survenue lors du téléchargement du fichier'));
                } else {
                    $msg = BananaMessage::newMessage($hdr_values, $_POST['body'], $uploaded);
                }
            } else {
                $msg = BananaMessage::newMessage($hdr_values, $_POST['body']);
            }
            if (!is_null($msg)) {
                if (Banana::$protocole->send($msg)) {
                    Banana::$page->redirect(array('group' => $group, 'artid' => $artid));
                }
                Banana::$page->trig(_b_('Une erreur est survenue lors de l\'envoi du message :') . '<br />'
                                   . Banana::$protocole->lastError());
            }
        } else {
            if (!is_null($artid)) {
                $msg    =& $this->loadMessage($group, $artid);
                $body    = $msg->getSender() . _b_(' a écrit :') . "\n" . $msg->quote();
                $subject = $msg->getHeaderValue('subject');
                $headers['Subject']['user'] = 'Re: ' . preg_replace("/^re\s*:\s*/i", '', $subject);
                $target  = $msg->getHeaderValue($hdrs['reply']);
                if (empty($target)) {
                    $target = $group;
                }
                $headers[$hdrs['dest']]['user'] =& $target;
            } else {
                $body    = '';
                $headers[$hdrs['dest']]['user'] = $group;
            }
            if (Banana::$profile['sig']) {
                $body .=  "\n\n-- \n" . Banana::$profile['sig'];
            }
            Banana::$page->assign('body', $body);
        }

        Banana::$page->assign('maxfilesize', Banana::$maxfilesize);
        Banana::$page->assign('can_attach', Banana::$can_attach);
        Banana::$page->assign('headers', $headers);
        return true;
    }

    protected function action_cancelMessage($group, $artid)
    {
        Banana::$page->setPage('cancel');
        $msg =& $this->loadMessage($group, $artid);
        if (!$msg->canCancel()) {
            return _b_('Vous n\'avez pas les droits suffisants pour supprimer ce message');
        }
        if (isset($_POST['cancel'])) {
            $this->loadSpool($group);
            $ndx = Banana::$spool->getNdX($id) - 1;
            if (!Banana::$protocole->cancel($msg)) {
                return _b_('Une erreur s\'est produite lors de l\'annulation du message :') . '<br />'
                       . Banana::$protocole->lastError();
            }
            if ($ndx < 50) {
                 $ndx = 0;
            }
            $this->removeMessage($group, $artid);
            Banana::$page->redirect(Array('group' => $group, 'first' => $ndx));
        }
        Banana::$page->assign_by_ref('message', $msg);
        return true;
    }

    /**************************************************************************/
    /* Private functions                                                      */
    /**************************************************************************/

    protected function loadSpool($group)
    {
        Banana::load('spool');
        if (!Banana::$spool || Banana::$spool->group != $group) {
            if ($group == @$_SESSION['banana_group'] && isset($_SESSION['banana_spool'])) {
                Banana::$spool = unserialize($_SESSION['banana_spool']);
            }    
            BananaSpool::getSpool($group, Banana::$profile['lastnews']);
            $_SESSION['banana_group'] = $group;
            $_SESSION['banana_spool'] = serialize(Banana::$spool);
            Banana::$spool->setMode(Banana::$profile['display'] ? Banana::SPOOL_UNREAD : Banana::SPOOL_ALL);
        }
        return true;
    }

    protected function &loadMessage($group, $artid)
    {
        Banana::load('message');
        if ($group == @$_SESSION['banana_group'] && $artid == @$_SESSION['banana_artid']
            && isset($_SESSION['banana_message'])) {
            $message = unserialize($_SESSION['banana_message']);
            Banana::$show_hdr = $_SESSION['banana_showhdr'];
        }  else {
            $message = Banana::$protocole->getMessage($artid);
            $_SESSION['banana_group'] = $group;
            $_SESSION['banana_artid'] = $artid;
            $_SESSION['banana_message'] = serialize($message);
            $_SESSION['banana_showhdr'] = Banana::$show_hdr;
        }
        Banana::$message =& $message;
        return $message;
    }

    protected function removeMessage($group, $artid)
    {
        Banana::$spool->delId($artid);
        if ($group == $_SESSION['banana_group']) {
            $_SESSION['banana_spool'] = serialize(Banana::$spool);
            if ($artid == $_SESSION['banana_artid']) {
                unset($_SESSION['banana_message']);
                unset($_SESSION['banana_showhdr']);
                unset($_SESSION['banana_artid']);
            }
        }
        return true;
    }

    static private function load($file)
    {
        $file = strtolower($file) . '.inc.php';
        if (!@include_once dirname(__FILE__) . "/$file") {
            require_once $file;
        }
    }
}

// vim:set et sw=4 sts=4 ts=4
?>
